name: Build And Test

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Code Style
        run: |
          ./code_style.sh
      - name: Test
        run: |
          ./run_tests.sh
          coverage xml
      - name: Submit Coverage
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          format: cobertura
          file: coverage.xml
          parallel: true
          flag-name: Python-${{ matrix.python-version }}

  finish:
    needs: build
    if: ${{ always() }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2
      with:
        parallel-finished: true

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build Docker
        run: |
          python setup.py sdist
          FILE=`ls dist/glowprom-*.tar.gz | cut -d- -f2`
          TAG=${FILE%.tar.gz} ./docker_build.sh

  release:
    runs-on: ubuntu-latest
    concurrency: release
    environment: Production
    if: github.repository == 'andrewjw/glowprom' && github.ref == 'refs/heads/master'
    needs: docker
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Release
        run: |
          git config --global user.email "andrewjwilkinson@gmail.com"
          git config --global user.name "Andrew Wilkinson"
          export VERSION=$(semantic-release --noop version)
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }} semantic-release version
          if [ -d "dist/" ]; then
            twine check dist/*
            TWINE_USERNAME=__token__ TWINE_PASSWORD=${{ secrets.PYPI_TOKEN }} twine upload dist/*
            GH_TOKEN=${{ secrets.GITHUB_TOKEN }} semantic-release publish
            DOCKER_TOKEN=${{ secrets.DOCKER_TOKEN }} TAG=$VERSION ./docker_build.sh --push
          fi
